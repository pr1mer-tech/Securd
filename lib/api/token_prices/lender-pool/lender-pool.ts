/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Pyratzlabs API
 * Securd contracts
 * OpenAPI spec version: v1
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import { useQuery } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type { LenderPool, LenderDeposit } from ".././schemas";

/**
 * API endpoint that shows LenderPool list
 */
export const lenderPoolList = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<LenderPool[]>> => {
  return axios.get(`/lender_pool/`, options);
};

export const getLenderPoolListQueryKey = () => [`/lender_pool/`] as const;

export const getLenderPoolListQueryOptions = <
  TData = Awaited<ReturnType<typeof lenderPoolList>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof lenderPoolList>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<
  Awaited<ReturnType<typeof lenderPoolList>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getLenderPoolListQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof lenderPoolList>>> = ({
    signal,
  }) => lenderPoolList({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type LenderPoolListQueryResult = NonNullable<
  Awaited<ReturnType<typeof lenderPoolList>>
>;
export type LenderPoolListQueryError = AxiosError<unknown>;

export const useLenderPoolList = <
  TData = Awaited<ReturnType<typeof lenderPoolList>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof lenderPoolList>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getLenderPoolListQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * API endpoint that shows LenderPool info
 */
export const lenderPoolRead = (
  assetAddress: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<LenderPool>> => {
  return axios.get(`/lender_pool/${assetAddress}/`, options);
};

export const getLenderPoolReadQueryKey = (assetAddress: string) =>
  [`/lender_pool/${assetAddress}/`] as const;

export const getLenderPoolReadQueryOptions = <
  TData = Awaited<ReturnType<typeof lenderPoolRead>>,
  TError = AxiosError<unknown>
>(
  assetAddress: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof lenderPoolRead>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof lenderPoolRead>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getLenderPoolReadQueryKey(assetAddress);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof lenderPoolRead>>> = ({
    signal,
  }) => lenderPoolRead(assetAddress, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!assetAddress, ...queryOptions };
};

export type LenderPoolReadQueryResult = NonNullable<
  Awaited<ReturnType<typeof lenderPoolRead>>
>;
export type LenderPoolReadQueryError = AxiosError<unknown>;

export const useLenderPoolRead = <
  TData = Awaited<ReturnType<typeof lenderPoolRead>>,
  TError = AxiosError<unknown>
>(
  assetAddress: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof lenderPoolRead>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getLenderPoolReadQueryOptions(assetAddress, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

/**
 * API endpoint that shows deposit amount (without interest) for a user
 */
export const lenderPoolBalancesRead = (
  assetAddress: string,
  userAddress: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<LenderDeposit>> => {
  return axios.get(
    `/lender_pool/${assetAddress}/balances/${userAddress}/`,
    options
  );
};

export const getLenderPoolBalancesReadQueryKey = (
  assetAddress: string,
  userAddress: string
) => [`/lender_pool/${assetAddress}/balances/${userAddress}/`] as const;

export const getLenderPoolBalancesReadQueryOptions = <
  TData = Awaited<ReturnType<typeof lenderPoolBalancesRead>>,
  TError = AxiosError<unknown>
>(
  assetAddress: string,
  userAddress: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof lenderPoolBalancesRead>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof lenderPoolBalancesRead>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getLenderPoolBalancesReadQueryKey(assetAddress, userAddress);

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof lenderPoolBalancesRead>>
  > = ({ signal }) =>
    lenderPoolBalancesRead(assetAddress, userAddress, {
      signal,
      ...axiosOptions,
    });

  return {
    queryKey,
    queryFn,
    enabled: !!(assetAddress && userAddress),
    ...queryOptions,
  };
};

export type LenderPoolBalancesReadQueryResult = NonNullable<
  Awaited<ReturnType<typeof lenderPoolBalancesRead>>
>;
export type LenderPoolBalancesReadQueryError = AxiosError<unknown>;

export const useLenderPoolBalancesRead = <
  TData = Awaited<ReturnType<typeof lenderPoolBalancesRead>>,
  TError = AxiosError<unknown>
>(
  assetAddress: string,
  userAddress: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof lenderPoolBalancesRead>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getLenderPoolBalancesReadQueryOptions(
    assetAddress,
    userAddress,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
