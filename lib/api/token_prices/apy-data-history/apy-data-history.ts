/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Pyratzlabs API
 * Securd contracts
 * OpenAPI spec version: v1
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import { useQuery } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";

/**
 * API endpoint to retreive interest rate and utilization rate history
 */
export const apyDataHistoryRead = (
  lenderModelAddress: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<void>> => {
  return axios.get(`/apy_data_history/${lenderModelAddress}/`, options);
};

export const getApyDataHistoryReadQueryKey = (lenderModelAddress: string) =>
  [`/apy_data_history/${lenderModelAddress}/`] as const;

export const getApyDataHistoryReadQueryOptions = <
  TData = Awaited<ReturnType<typeof apyDataHistoryRead>>,
  TError = AxiosError<unknown>
>(
  lenderModelAddress: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apyDataHistoryRead>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof apyDataHistoryRead>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getApyDataHistoryReadQueryKey(lenderModelAddress);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof apyDataHistoryRead>>> =
    ({ signal }) =>
      apyDataHistoryRead(lenderModelAddress, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!lenderModelAddress, ...queryOptions };
};

export type ApyDataHistoryReadQueryResult = NonNullable<
  Awaited<ReturnType<typeof apyDataHistoryRead>>
>;
export type ApyDataHistoryReadQueryError = AxiosError<unknown>;

export const useApyDataHistoryRead = <
  TData = Awaited<ReturnType<typeof apyDataHistoryRead>>,
  TError = AxiosError<unknown>
>(
  lenderModelAddress: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof apyDataHistoryRead>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getApyDataHistoryReadQueryOptions(
    lenderModelAddress,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
