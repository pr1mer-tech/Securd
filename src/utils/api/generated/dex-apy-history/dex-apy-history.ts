/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Pyratzlabs API
 * Securd contracts
 * OpenAPI spec version: v1
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import { useQuery } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type {
  DexApyHistoryResponse,
  DexApyHistoryReadParams,
} from ".././schemas";

/**
 * API endpoint to retrieve APY history
 */
export const dexApyHistoryRead = (
  borrowerPoolAddress: string,
  params?: DexApyHistoryReadParams,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<DexApyHistoryResponse[]>> => {
  return axios.get(`/dex_apy_history/${borrowerPoolAddress}/`, {
    ...options,
    params: { ...params, ...options?.params },
  });
};

export const getDexApyHistoryReadQueryKey = (
  borrowerPoolAddress: string,
  params?: DexApyHistoryReadParams
) =>
  [
    `/dex_apy_history/${borrowerPoolAddress}/`,
    ...(params ? [params] : []),
  ] as const;

export const getDexApyHistoryReadQueryOptions = <
  TData = Awaited<ReturnType<typeof dexApyHistoryRead>>,
  TError = AxiosError<void>
>(
  borrowerPoolAddress: string,
  params?: DexApyHistoryReadParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof dexApyHistoryRead>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<
  Awaited<ReturnType<typeof dexApyHistoryRead>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ??
    getDexApyHistoryReadQueryKey(borrowerPoolAddress, params);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof dexApyHistoryRead>>> =
    ({ signal }) =>
      dexApyHistoryRead(borrowerPoolAddress, params, {
        signal,
        ...axiosOptions,
      });

  return { queryKey, queryFn, enabled: !!borrowerPoolAddress, ...queryOptions };
};

export type DexApyHistoryReadQueryResult = NonNullable<
  Awaited<ReturnType<typeof dexApyHistoryRead>>
>;
export type DexApyHistoryReadQueryError = AxiosError<void>;

export const useDexApyHistoryRead = <
  TData = Awaited<ReturnType<typeof dexApyHistoryRead>>,
  TError = AxiosError<void>
>(
  borrowerPoolAddress: string,
  params?: DexApyHistoryReadParams,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof dexApyHistoryRead>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getDexApyHistoryReadQueryOptions(
    borrowerPoolAddress,
    params,
    options
  );

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
