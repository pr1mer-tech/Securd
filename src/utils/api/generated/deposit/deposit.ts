/**
 * Generated by orval v6.16.0 üç∫
 * Do not edit manually.
 * Pyratzlabs API
 * Securd contracts
 * OpenAPI spec version: v1
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import { useQuery } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type { UserLenderPools } from ".././schemas";

/**
 * API endpoint that shows LenderPools for a user
 */
export const depositRead = (
  userAddress: string,
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UserLenderPools[]>> => {
  return axios.get(`/deposit/${userAddress}/`, options);
};

export const getDepositReadQueryKey = (userAddress: string) =>
  [`/deposit/${userAddress}/`] as const;

export const getDepositReadQueryOptions = <
  TData = Awaited<ReturnType<typeof depositRead>>,
  TError = AxiosError<unknown>
>(
  userAddress: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof depositRead>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryOptions<Awaited<ReturnType<typeof depositRead>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey =
    queryOptions?.queryKey ?? getDepositReadQueryKey(userAddress);

  const queryFn: QueryFunction<Awaited<ReturnType<typeof depositRead>>> = ({
    signal,
  }) => depositRead(userAddress, { signal, ...axiosOptions });

  return { queryKey, queryFn, enabled: !!userAddress, ...queryOptions };
};

export type DepositReadQueryResult = NonNullable<
  Awaited<ReturnType<typeof depositRead>>
>;
export type DepositReadQueryError = AxiosError<unknown>;

export const useDepositRead = <
  TData = Awaited<ReturnType<typeof depositRead>>,
  TError = AxiosError<unknown>
>(
  userAddress: string,
  options?: {
    query?: UseQueryOptions<
      Awaited<ReturnType<typeof depositRead>>,
      TError,
      TData
    >;
    axios?: AxiosRequestConfig;
  }
): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getDepositReadQueryOptions(userAddress, options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
